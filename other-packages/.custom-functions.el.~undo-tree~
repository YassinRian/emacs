(undo-tree-save-format-version . 1)
"aecf1a09906a359cc41f4780c9e401670d384b61"
[nil nil nil nil (26214 11541 117232 818000) 0 nil]
([nil nil ((11099 . 11101) (t 26212 60417 900702 720000)) nil (26214 11541 117231 802000) 0 nil])
([nil nil ((11101 . 11104)) nil (26214 11541 117231 194000) 0 nil])
([nil nil ((11104 . 11105)) nil (26214 11541 117230 670000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11104) (undo-tree-id0 . -1) 11105) nil (26214 11541 117229 487000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11715 . 11716) (nil fontified nil 11101 . 11716) (11101 . 11716)) nil (26214 11541 117211 927000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12331 . 12332) (nil fontified nil 11718 . 12332) (11718 . 12332) (t 26214 11541 129645 857000)) nil (26214 11952 419388 392000) 0 nil])
([nil nil ((#("(defun search-flaskr-in-directory (directory search-string)
  \"Search for SEARCH-STRING in all files within DIRECTORY using find and awk.\"
  (interactive
   (list
    (consult--directory-prompt \"Select directory: \")
    (read-string \"Enter search string: \" \"flaskr\")))
  (let ((command (format \"find %s -type f -exec awk '/%s/ {printf \\\"%%-30s %%-10s %%s\\\\n\\\", FILENAME, FNR, $0}' {} +\"
                         (shell-quote-argument directory)
                         (shell-quote-argument search-string))))
    (compilation-start command 'grep-mode)))

(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 33 (face font-lock-function-name-face fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 62 (fontified t) 62 138 (face font-lock-doc-face fontified t) 138 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 153 (face font-lock-keyword-face fontified t) 153 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-3-face) fontified t) 158 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-4-face) fontified t) 168 194 (fontified t) 194 214 (face font-lock-string-face fontified t) 214 215 (face (rainbow-delimiters-depth-4-face) fontified t) 215 220 (fontified t) 220 221 (face (rainbow-delimiters-depth-4-face) fontified t) 221 233 (fontified t) 233 256 (face font-lock-string-face fontified t) 256 257 (fontified t) 257 265 (face font-lock-string-face fontified t) 265 266 (face (rainbow-delimiters-depth-4-face) fontified t) 266 267 (face (rainbow-delimiters-depth-3-face) fontified t) 267 268 (face (rainbow-delimiters-depth-2-face) fontified t) 268 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-2-face) fontified t) 272 275 (face font-lock-keyword-face fontified t) 275 276 (fontified t) 276 277 (face (rainbow-delimiters-depth-3-face) fontified t) 277 278 (face (rainbow-delimiters-depth-4-face) fontified t) 278 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-5-face) fontified t) 287 294 (fontified t) 294 386 (face font-lock-string-face fontified t) 386 412 (fontified t) 412 413 (face (rainbow-delimiters-depth-6-face) fontified t) 413 443 (fontified t) 443 444 (face (rainbow-delimiters-depth-6-face) fontified t) 444 470 (fontified t) 470 471 (face (rainbow-delimiters-depth-6-face) fontified t) 471 505 (fontified t) 505 506 (face (rainbow-delimiters-depth-6-face) fontified t) 506 507 (face (rainbow-delimiters-depth-5-face) fontified t) 507 508 (face (rainbow-delimiters-depth-4-face) fontified t) 508 509 (face (rainbow-delimiters-depth-3-face) fontified t) 509 510 (fontified t) 510 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-3-face) fontified t) 515 551 (fontified t) 551 552 (face (rainbow-delimiters-depth-3-face) fontified t) 552 553 (face (rainbow-delimiters-depth-2-face) fontified t) 553 554 (face (rainbow-delimiters-depth-1-face) fontified t) 554 555 (fontified t) 555 556 (fontified t) 556 557 (face (rainbow-delimiters-depth-1-face) fontified t) 557 572 (fontified t) 572 573 (face (rainbow-delimiters-depth-2-face) fontified t) 573 577 (fontified t) 577 584 (face font-lock-string-face fontified t) 584 585 (face (rainbow-delimiters-depth-2-face) fontified t) 585 613 (fontified t) 613 614 (face (rainbow-delimiters-depth-1-face) fontified t) 614 615 (fontified t)) . 11101) (undo-tree-id18 . -615) (undo-tree-id19 . -615) (undo-tree-id20 . -615) (undo-tree-id21 . -615) (undo-tree-id22 . -556) (undo-tree-id23 . -556) (undo-tree-id24 . -556) (undo-tree-id25 . -555) (undo-tree-id26 . -555) (undo-tree-id27 . -555) (undo-tree-id28 . -555) (undo-tree-id29 . -510) (undo-tree-id30 . -510) (undo-tree-id31 . -510) (undo-tree-id32 . -445) (undo-tree-id33 . -445) (undo-tree-id34 . -445) (undo-tree-id35 . -387) (undo-tree-id36 . -387) (undo-tree-id37 . -387) (undo-tree-id38 . -269) (undo-tree-id39 . -269) (undo-tree-id40 . -269) (undo-tree-id41 . -216) (undo-tree-id42 . -216) (undo-tree-id43 . -216) (undo-tree-id44 . -163) (undo-tree-id45 . -163) (undo-tree-id46 . -163) (undo-tree-id47 . -163) (undo-tree-id48 . -163) (undo-tree-id49 . -163) (undo-tree-id50 . -163) (undo-tree-id51 . -163) (undo-tree-id52 . -163) (undo-tree-id53 . -163) (undo-tree-id54 . -163) (undo-tree-id55 . -163) (undo-tree-id56 . -154) (undo-tree-id57 . -154) (undo-tree-id58 . -154) (undo-tree-id59 . -139) (undo-tree-id60 . -139) (undo-tree-id61 . -139) (undo-tree-id62 . -60) (undo-tree-id63 . -60) (undo-tree-id64 . -60) (undo-tree-id65 . -60) (undo-tree-id66 . -60) (undo-tree-id67 . -60) (undo-tree-id68 . -60) (undo-tree-id69 . -60) (undo-tree-id70 . -60) (undo-tree-id71 . -60) (undo-tree-id72 . -60) (undo-tree-id73 . -60) (undo-tree-id74 . -60) (undo-tree-id75 . -60) (undo-tree-id76 . -139) (undo-tree-id77 . -139) (undo-tree-id78 . -139) (undo-tree-id79 . -154) (undo-tree-id80 . -154) (undo-tree-id81 . -154) (undo-tree-id82 . -163) (undo-tree-id83 . -163) (undo-tree-id84 . -163) (undo-tree-id85 . -216) (undo-tree-id86 . -216) (undo-tree-id87 . -216) (undo-tree-id88 . -269) (undo-tree-id89 . -269) (undo-tree-id90 . -269) (undo-tree-id91 . -387) (undo-tree-id92 . -387) (undo-tree-id93 . -387) (undo-tree-id94 . -445) (undo-tree-id95 . -445) (undo-tree-id96 . -445) (undo-tree-id97 . -510) (undo-tree-id98 . -510) (undo-tree-id99 . -510) (undo-tree-id100 . -555) (undo-tree-id101 . -555) (undo-tree-id102 . -555) (undo-tree-id103 . -556) (undo-tree-id104 . -556) (undo-tree-id105 . -556) (undo-tree-id106 . -556) (undo-tree-id107 . -556) (undo-tree-id108 . -556) (undo-tree-id109 . -615) (undo-tree-id110 . -615) (undo-tree-id111 . -615) (undo-tree-id112 . -615) (undo-tree-id113 . -615) (undo-tree-id114 . -615) (undo-tree-id115 . -615) (undo-tree-id116 . -615) (undo-tree-id117 . -615) 11716) nil (26214 11952 419383 791000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11101) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) nil (26214 11952 418641 779000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11101) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1)) nil (26214 11952 418636 149000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11099) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1)) nil (26214 11952 418624 170000) 0 nil])
([nil nil ((11715 . 11719) (t 26214 11952 432819 804000)) nil (26214 12698 753374 501000) 0 nil])
([nil nil ((11719 . 11720)) nil (26214 12698 753373 961000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11719) (undo-tree-id10 . -1) 11720) nil (26214 12698 753373 439000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12257 . 12258) (nil fontified nil 11717 . 12258) (11717 . 12258)) nil (26214 12698 753372 246000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (fontified t)) . 11655)) nil (26214 12698 753371 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12258 . 12259) (nil fontified nil 12258 . 12259) (nil fontified nil 12257 . 12258) (nil fontified nil 12229 . 12257) (nil fontified nil 12228 . 12229) (nil fontified nil 12221 . 12228) (nil fontified nil 12217 . 12221) (nil fontified nil 12216 . 12217) (nil fontified nil 12201 . 12216) (nil fontified nil 12200 . 12201) (12200 . 12259)) nil (26214 12698 753370 991000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11158 . 11159) (nil fontified nil 11158 . 11159) (nil fontified nil 11157 . 11158) (nil fontified nil 11129 . 11157) (nil fontified nil 11128 . 11129) (nil fontified nil 11121 . 11128) (nil fontified nil 11117 . 11121) (nil fontified nil 11116 . 11117) (nil fontified nil 11101 . 11116) (nil fontified nil 11100 . 11101) (11100 . 11159)) nil (26214 12698 753369 702000) 0 nil])
([nil nil ((11159 . 11160)) nil (26214 12698 753368 573000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t)) . -11159) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 11160) nil (26214 12698 753368 11000) 0 nil])
([nil nil ((11159 . 11160)) nil (26214 12698 753365 162000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11159) (undo-tree-id5 . -1) 11160) nil (26214 12698 753364 557000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)
(defun search-flaskr-in-directory (directory search-string)
  \"Search for SEARCH-STRING in all files within DIRECTORY using find and awk.\"
  (interactive
   (list
    (consult-dir--read \"Select recent directory: \")
    (read-string \"Enter search string: \" \"flaskr\")))
  (let ((command (format \"find %s -type f -exec awk '/%s/ {printf \\\"%%-30s %%-10s %%s\\\\n\\\", FILENAME, FNR, $0}' {} +\"
                         (shell-quote-argument directory)
                         (shell-quote-argument search-string))))
    (compilation-start command 'grep-mode)))

" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (rear-nonsticky t fontified t) 59 60 (face (rainbow-delimiters-depth-1-face) fontified t) 60 65 (face font-lock-keyword-face fontified t) 65 66 (fontified t) 66 92 (face font-lock-function-name-face fontified t) 92 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-2-face) fontified t) 94 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-2-face) fontified t) 118 119 (fontified t) 119 121 (fontified defer) 121 197 (fontified defer face font-lock-doc-face) 197 200 (fontified defer) 200 201 (fontified defer face (rainbow-delimiters-depth-2-face)) 201 212 (fontified defer face font-lock-keyword-face) 212 216 (fontified defer) 216 217 (fontified defer face (rainbow-delimiters-depth-3-face)) 217 226 (fontified defer) 226 227 (fontified defer face (rainbow-delimiters-depth-4-face)) 227 245 (fontified defer) 245 272 (fontified defer face font-lock-string-face) 272 273 (fontified defer face (rainbow-delimiters-depth-4-face)) 273 278 (fontified defer) 278 279 (fontified defer face (rainbow-delimiters-depth-4-face)) 279 291 (fontified defer) 291 314 (fontified defer face font-lock-string-face) 314 315 (fontified defer) 315 323 (fontified defer face font-lock-string-face) 323 324 (fontified defer face (rainbow-delimiters-depth-4-face)) 324 325 (fontified defer face (rainbow-delimiters-depth-3-face)) 325 326 (fontified defer face (rainbow-delimiters-depth-2-face)) 326 329 (fontified defer) 329 330 (fontified defer face (rainbow-delimiters-depth-2-face)) 330 333 (fontified defer face font-lock-keyword-face) 333 334 (fontified defer) 334 335 (fontified defer face (rainbow-delimiters-depth-3-face)) 335 336 (fontified defer face (rainbow-delimiters-depth-4-face)) 336 344 (fontified defer) 344 345 (fontified defer face (rainbow-delimiters-depth-5-face)) 345 352 (fontified defer) 352 444 (fontified defer face font-lock-string-face) 444 470 (fontified defer) 470 471 (fontified defer face (rainbow-delimiters-depth-6-face)) 471 501 (fontified defer) 501 502 (fontified defer face (rainbow-delimiters-depth-6-face)) 502 528 (fontified defer) 528 529 (fontified defer face (rainbow-delimiters-depth-6-face)) 529 563 (fontified defer) 563 564 (fontified defer face (rainbow-delimiters-depth-6-face)) 564 565 (fontified defer face (rainbow-delimiters-depth-5-face)) 565 566 (fontified defer face (rainbow-delimiters-depth-4-face)) 566 567 (fontified defer face (rainbow-delimiters-depth-3-face)) 567 572 (fontified defer) 572 573 (fontified defer face (rainbow-delimiters-depth-3-face)) 573 609 (fontified defer) 609 610 (fontified defer face (rainbow-delimiters-depth-3-face)) 610 611 (fontified defer face (rainbow-delimiters-depth-2-face)) 611 612 (fontified defer face (rainbow-delimiters-depth-1-face)) 612 614 (fontified defer)) . 11100) (undo-tree-id1 . -614) (undo-tree-id2 . -59) (undo-tree-id3 . -59) (undo-tree-id4 . -614) 11714) nil (26214 12698 753363 112000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100) (undo-tree-id0 . -1)) nil (26214 12698 753358 935000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100)) nil (26214 12698 753342 273000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11717 . 11718) (nil fontified nil 11099 . 11718) (11099 . 11718) (t 26214 12698 765693 624000)) nil (26214 13038 624879 486000) 0 nil])
([nil nil ((#("
(defun search-flaskr-in-directory ()
  \"Search for a string in all files within a directory using find and awk.\"
  (interactive)
  (let* ((directory (consult-dir-default-command))
         (search-string (read-string \"Enter search string: \" \"flaskr\"))
         (command (format \"find %s -type f -exec awk '/%s/ {printf \\\"%%-30s %%-10s %%s\\\\n\\\", FILENAME, FNR, $0}' {} +\"
                          (shell-quote-argument directory)
                          (shell-quote-argument search-string))))
    (compilation-start command 'grep-mode)))
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 34 (face font-lock-function-name-face fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 40 (fontified t) 40 113 (face font-lock-doc-face fontified t) 113 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-2-face) fontified t) 117 128 (face font-lock-keyword-face fontified t) 128 129 (face (rainbow-delimiters-depth-2-face) fontified t) 129 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-2-face) fontified t) 133 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-3-face) fontified t) 139 140 (face (rainbow-delimiters-depth-4-face) fontified t) 140 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-5-face) fontified t) 151 178 (fontified t) 178 179 (face (rainbow-delimiters-depth-5-face) fontified t) 179 180 (face (rainbow-delimiters-depth-4-face) fontified t) 180 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-4-face) fontified t) 191 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-5-face) fontified t) 206 218 (fontified t) 218 241 (face font-lock-string-face fontified t) 241 242 (fontified t) 242 250 (face font-lock-string-face fontified t) 250 251 (face (rainbow-delimiters-depth-5-face) fontified t) 251 252 (face (rainbow-delimiters-depth-4-face) fontified t) 252 262 (fontified t) 262 263 (face (rainbow-delimiters-depth-4-face) fontified t) 263 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-5-face) fontified t) 272 279 (fontified t) 279 371 (face font-lock-string-face fontified t) 371 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-6-face) fontified t) 399 429 (fontified t) 429 430 (face (rainbow-delimiters-depth-6-face) fontified t) 430 457 (fontified t) 457 458 (face (rainbow-delimiters-depth-6-face) fontified t) 458 492 (fontified t) 492 493 (face (rainbow-delimiters-depth-6-face) fontified t) 493 494 (face (rainbow-delimiters-depth-5-face) fontified t) 494 495 (face (rainbow-delimiters-depth-4-face) fontified t) 495 496 (face (rainbow-delimiters-depth-3-face) fontified t) 496 501 (fontified t) 501 502 (face (rainbow-delimiters-depth-3-face) fontified t) 502 538 (fontified t) 538 539 (face (rainbow-delimiters-depth-3-face) fontified t) 539 540 (face (rainbow-delimiters-depth-2-face) fontified t) 540 541 (face (rainbow-delimiters-depth-1-face) fontified t) 541 542 (fontified t)) . 11719) (undo-tree-id98 . -542) (undo-tree-id99 . -542) (undo-tree-id100 . -542) (undo-tree-id101 . -542) 12261) nil (26214 13038 624878 626000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (rear-nonsticky t fontified t)) . 11659) (undo-tree-id91 . -59) (undo-tree-id92 . -59) (undo-tree-id93 . -59) (undo-tree-id94 . -59) (undo-tree-id95 . -59) (undo-tree-id96 . -59) (undo-tree-id97 . -59)) nil (26214 13038 624874 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11659) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1)) nil (26214 13038 624786 711000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11658) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) nil (26214 13038 624772 416000) 0 nil])
([nil nil ((11099 . 11100)) nil (26214 13038 624433 556000) 0 nil])
([nil nil ((11100 . 11101)) nil (26214 13038 624432 831000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11100) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 11101) nil (26214 13038 624429 667000) 0 nil])
([nil nil ((11719 . 11721) (t 26214 13038 636681 799000)) nil (26214 13874 620752 349000) 0 nil])
([nil nil ((11721 . 11722)) nil (26214 13874 620751 832000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11721) (undo-tree-id60 . -1) 11722) nil (26214 13874 620751 362000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12298 . 12299) (nil fontified nil 11721 . 12299) (11721 . 12299)) nil (26214 13874 620750 163000) 0 nil])
([nil nil ((#("(defun search-flaskr-in-directory (search-string)
  \"Search for SEARCH-STRING in all files within default-directory using find and awk.\"
  (interactive \"sEnter search string: \")
  (let* ((directory default-directory)
         (search-string (or search-string \"flaskr\"))
         (command (format \"find %s -type f -exec awk '/%s/ {printf \\\"%%-30s %%-10s %%s\\\\n\\\", FILENAME, FNR, $0}' {} +\"
                          (shell-quote-argument directory)
                          (shell-quote-argument search-string))))
    (compilation-start command 'grep-mode)))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 33 (face font-lock-function-name-face fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 52 (fontified t) 52 136 (face font-lock-doc-face fontified t) 136 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-2-face) fontified t) 140 151 (face font-lock-keyword-face fontified t) 151 152 (fontified t) 152 176 (face font-lock-string-face fontified t) 176 177 (face (rainbow-delimiters-depth-2-face) fontified t) 177 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t) 181 185 (face font-lock-keyword-face fontified t) 185 186 (fontified t) 186 187 (face (rainbow-delimiters-depth-3-face) fontified t) 187 188 (face (rainbow-delimiters-depth-4-face) fontified t) 188 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-4-face) fontified t) 216 226 (fontified t) 226 227 (face (rainbow-delimiters-depth-4-face) fontified t) 227 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-5-face) fontified t) 242 244 (face font-lock-keyword-face fontified t) 244 259 (fontified t) 259 267 (face font-lock-string-face fontified t) 267 268 (face (rainbow-delimiters-depth-5-face) fontified t) 268 269 (face (rainbow-delimiters-depth-4-face) fontified t) 269 279 (fontified t) 279 280 (face (rainbow-delimiters-depth-4-face) fontified t) 280 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-5-face) fontified t) 289 296 (fontified t) 296 388 (face font-lock-string-face fontified t) 388 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-6-face) fontified t) 416 446 (fontified t) 446 447 (face (rainbow-delimiters-depth-6-face) fontified t) 447 474 (fontified t) 474 475 (face (rainbow-delimiters-depth-6-face) fontified t) 475 509 (fontified t) 509 510 (face (rainbow-delimiters-depth-6-face) fontified t) 510 511 (face (rainbow-delimiters-depth-5-face) fontified t) 511 512 (face (rainbow-delimiters-depth-4-face) fontified t) 512 513 (face (rainbow-delimiters-depth-3-face) fontified t) 513 518 (fontified t) 518 519 (face (rainbow-delimiters-depth-3-face) fontified t) 519 555 (fontified t) 555 556 (face (rainbow-delimiters-depth-3-face) fontified t) 556 557 (face (rainbow-delimiters-depth-2-face) fontified t) 557 558 (face (rainbow-delimiters-depth-1-face) fontified t) 558 559 (fontified t)) . 11100) (undo-tree-id53 . -559) (undo-tree-id54 . -559) (undo-tree-id55 . -559) (undo-tree-id56 . -559) (undo-tree-id57 . -559) (undo-tree-id58 . -559) (undo-tree-id59 . -559) 11659) nil (26214 13874 620749 171000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (fontified t)) . 11101) (undo-tree-id45 . -59) (undo-tree-id46 . -59) (undo-tree-id47 . -59) (undo-tree-id48 . -59) (undo-tree-id49 . -59) (undo-tree-id50 . -59) (undo-tree-id51 . -59) (undo-tree-id52 . -59)) nil (26214 13874 620743 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11740 . 11741) (nil fontified nil 11740 . 11741) (nil fontified nil 11739 . 11740) (nil fontified nil 11711 . 11739) (nil fontified nil 11710 . 11711) (nil fontified nil 11703 . 11710) (nil fontified nil 11699 . 11703) (nil fontified nil 11698 . 11699) (nil fontified nil 11683 . 11698) (nil fontified nil 11682 . 11683) (11682 . 11741)) nil (26214 13874 620737 95000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1)) nil (26214 13874 620734 787000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1)) nil (26214 13874 620706 776000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11555 . 11556) (nil fontified nil 11099 . 11556) (11099 . 11556) (t 26214 13874 632768 749000)) nil (26214 14402 942112 514000) 0 nil])
([nil nil ((11099 . 11100)) nil (26214 14402 942111 668000) 0 nil])
([nil nil ((11100 . 11101)) nil (26214 14402 942111 288000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11100) (undo-tree-id2 . -1) 11101) nil (26214 14402 942110 784000) 0 nil])
([nil nil ((#("(defcustom consult-dir-custom-command #'search-flaskr-in-directory
  \"Custom command to run after selecting a directory using `consult-dir'.

The default is to invoke `search-flaskr-in-directory' from the chosen
directory. This can be customized to run any arbitrary function
(of no variables), which will be called with `default-directory'
set to the directory chosen using `consult-dir'.\"
  :group 'consult-dir
  :type '(function :tag \"Custom function\"))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 37 (face font-lock-variable-name-face fontified t) 37 67 (fontified t) 67 69 (fontified t) 69 127 (face font-lock-doc-face fontified t) 127 138 (face (font-lock-constant-face font-lock-doc-face) fontified t) 138 168 (face font-lock-doc-face fontified t) 168 194 (face (font-lock-constant-face font-lock-doc-face) fontified t) 194 322 (face font-lock-doc-face fontified t) 322 339 (face (font-lock-constant-face font-lock-doc-face) fontified t) 339 376 (face font-lock-doc-face fontified t) 376 387 (face (font-lock-constant-face font-lock-doc-face) fontified t) 387 390 (face font-lock-doc-face fontified t) 390 393 (fontified t) 393 399 (face font-lock-builtin-face fontified t) 399 415 (fontified t) 415 420 (face font-lock-builtin-face fontified t) 420 422 (fontified t) 422 423 (face (rainbow-delimiters-depth-2-face) fontified t) 423 432 (fontified t) 432 436 (face font-lock-builtin-face fontified t) 436 437 (fontified t) 437 454 (face font-lock-string-face fontified t) 454 455 (face (rainbow-delimiters-depth-2-face) fontified t) 455 456 (face (rainbow-delimiters-depth-1-face) fontified t) 456 457 (fontified t rear-nonsticky t)) . 11100) (undo-tree-id1 . -457) 11557) nil (26214 14402 942109 511000) 0 nil])
([nil nil ((11680 . 11683)) nil (26214 14402 942107 969000) 0 nil])
([nil nil ((11683 . 11684)) nil (26214 14402 942107 549000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11683) (undo-tree-id0 . -1) 11684) nil (26214 14402 942106 954000) 0 nil])
([nil nil ((nil fontified nil 12138 . 12139) (nil fontified nil 12137 . 12138) (nil fontified nil 12136 . 12137) (nil fontified nil 12119 . 12136) (nil fontified nil 12118 . 12119) (nil fontified nil 12114 . 12118) (nil fontified nil 12105 . 12114) (nil fontified nil 12104 . 12105) (nil fontified nil 12102 . 12104) (nil fontified nil 12097 . 12102) (nil fontified nil 12081 . 12097) (nil fontified nil 12075 . 12081) (nil fontified nil 12072 . 12075) (nil fontified nil 12069 . 12072) (nil fontified nil 12058 . 12069) (nil fontified nil 12021 . 12058) (nil fontified nil 12004 . 12021) (nil fontified nil 11876 . 12004) (nil fontified nil 11850 . 11876) (nil fontified nil 11820 . 11850) (nil fontified nil 11809 . 11820) (nil fontified nil 11751 . 11809) (nil fontified nil 11749 . 11751) (nil fontified nil 11719 . 11749) (nil fontified nil 11693 . 11719) (nil fontified nil 11692 . 11693) (nil fontified nil 11683 . 11692) (nil fontified nil 11682 . 11683) (11682 . 12139)) nil (26214 14402 942093 389000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100)) nil (26214 14402 942090 511000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11100)) nil (26214 14402 942086 393000) 0 nil])
([nil nil ((12138 . 12145) (t 26214 14402 955574 140000)) nil (26214 51723 945354 892000) 0 nil])
([nil nil ((12145 . 12146)) nil (26214 51723 945354 362000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -12145) (undo-tree-id194 . -1) 12146) nil (26214 51723 945353 806000) 0 nil])
([nil nil ((apply -51 11100 12189 undo--wrap-and-run-primitive-undo 11100 12189 ((12141 . 12144) (12116 . 12119) (12063 . 12066) (11995 . 11998) (11928 . 11931) (11855 . 11858) (11777 . 11780) (11707 . 11710) (11657 . 11660) (11588 . 11591) (11526 . 11529) (11404 . 11407) (11348 . 11351) (11287 . 11290) (11243 . 11246) (11153 . 11156) (11100 . 11103) 12137))) nil (26214 51723 945352 610000) 0 nil])
([nil nil ((11099 . 11100)) nil (26214 51723 945352 224000) 0 nil])
([nil nil ((11100 . 11102)) nil (26214 51723 945351 829000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -11100) (undo-tree-id192 . -1) (#(";" 0 1 (fontified defer)) . -11101) (undo-tree-id193 . -1) 11102) nil (26214 51723 945351 319000) 0 nil])
([nil nil ((11100 . 11102)) nil (26214 51723 945349 539000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -11100) (undo-tree-id190 . -1) (#(";" 0 1 (face font-lock-comment-face fontified t)) . -11101) (undo-tree-id191 . -1) 11102) nil (26214 51723 945348 914000) 0 nil])
([nil nil ((11100 . 11101)) nil (26214 51723 945347 20000) 0 nil])
([nil nil ((11101 . 11111)) nil (26214 51723 945346 644000) 0 nil])
([nil nil ((11111 . 11112)) nil (26214 51723 945346 234000) 0 nil])
([nil nil ((11112 . 11113)) nil (26214 51723 945345 796000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -11112) (undo-tree-id189 . -1) 11113) nil (26214 51723 945345 255000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12291 . 12292) (nil fontified nil 12205 . 12292) (nil fontified nil 12203 . 12205) (12203 . 12292)) nil (26214 51723 945343 794000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 12202) (undo-tree-id188 . -1)) nil (26214 51723 945343 51000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13096 . 13097) (nil fontified nil 12292 . 13097) (12292 . 13097)) nil (26214 51723 945341 755000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t)) . 13038) (undo-tree-id187 . -58) 13096) nil (26214 51723 945341 69000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 13038)) nil (26214 51723 945339 875000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13038)) nil (26214 51723 945339 483000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13038)) nil (26214 51723 945339 61000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13038)) nil (26214 51723 945338 517000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13038)) nil (26214 51723 945338 102000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13518 . 13519) (nil fontified nil 13518 . 13519) (nil fontified nil 13517 . 13518) (nil fontified nil 13516 . 13517) (nil fontified nil 13499 . 13516) (nil fontified nil 13498 . 13499) (nil fontified nil 13494 . 13498) (nil fontified nil 13485 . 13494) (nil fontified nil 13484 . 13485) (nil fontified nil 13482 . 13484) (nil fontified nil 13477 . 13482) (nil fontified nil 13475 . 13477) (nil fontified nil 13472 . 13475) (nil fontified nil 13458 . 13472) (nil fontified nil 13452 . 13458) (nil fontified nil 13450 . 13452) (nil fontified nil 13447 . 13450) (nil fontified nil 13446 . 13447) (nil fontified nil 13443 . 13446) (nil fontified nil 13432 . 13443) (nil fontified nil 13397 . 13432) (nil fontified nil 13394 . 13397) (nil fontified nil 13392 . 13394) (nil fontified nil 13375 . 13392) (nil fontified nil 13329 . 13375) (nil fontified nil 13326 . 13329) (nil fontified nil 13262 . 13326) (nil fontified nil 13259 . 13262) (nil fontified nil 13241 . 13259) (nil fontified nil 13215 . 13241) (nil fontified nil 13189 . 13215) (nil fontified nil 13186 . 13189) (nil fontified nil 13185 . 13186) (nil fontified nil 13182 . 13185) (nil fontified nil 13171 . 13182) (nil fontified nil 13113 . 13171) (nil fontified nil 13111 . 13113) (nil fontified nil 13108 . 13111) (nil fontified nil 13078 . 13108) (nil fontified nil 13052 . 13078) (nil fontified nil 13051 . 13052) (nil fontified nil 13042 . 13051) (nil fontified nil 13041 . 13042) (nil fontified nil 13038 . 13041) (13038 . 13519)) nil (26214 51723 945336 832000) 0 nil])
([nil nil ((apply 24 13037 13495 undo--wrap-and-run-primitive-undo 13037 13495 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13451) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13429) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13379) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13314) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13250) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13180) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13105) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -13038) 13519))) nil (26214 51723 945333 154000) 0 nil])
([nil nil ((13037 . 13038)) nil (26214 51723 945332 682000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -13037) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 13038) nil (26214 51723 945332 119000) 0 nil])
([nil nil ((13037 . 13038)) nil (26214 51723 945329 520000) 0 nil])
([nil nil ((13037 . 13043) (#("v" 0 1 (fontified t)) . -13037) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 13038) nil (26214 51723 945328 565000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -13037) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("a" 0 1 (fontified t)) . -13038) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("l" 0 1 (fontified t)) . -13039) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("u" 0 1 (fontified t)) . -13040) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("e" 0 1 (fontified t)) . -13041) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("s" 0 1 (fontified t)) . -13042) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 13043) nil (26214 51723 945311 608000) 0 nil])
([nil nil ((13037 . 13038)) nil (26214 51723 944847 407000) 0 nil])
([nil nil ((13038 . 13039)) nil (26214 51723 944846 682000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -13038) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 13039) nil (26214 51723 944843 799000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-function-name-face fontified t)) . -12326) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -12327) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -12328) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -12329) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("k" 0 1 (face font-lock-function-name-face fontified t)) . -12330) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -12331) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 12332 (t 26214 51723 959067 691000)) nil (26214 60464 914200 733000) 0 nil])
([nil nil ((12326 . 12332)) nil (26214 60464 914192 142000) 0 nil])
([nil nil ((12332 . 12333)) nil (26214 60464 914191 624000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-function-name-face fontified t)) . -12332) (undo-tree-id101 . -1) 12333) nil (26214 60464 914190 927000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -13086) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("l" 0 1 (fontified t)) . -13087) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("a" 0 1 (fontified t)) . -13088) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("s" 0 1 (fontified t)) . -13089) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("k" 0 1 (fontified t)) . -13090) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("r" 0 1 (fontified t)) . -13091) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 13092) nil (26214 60464 914188 936000) 0 nil])
([nil nil ((13086 . 13093)) nil (26214 60464 913682 79000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -13092) (undo-tree-id88 . -1) 13093) nil (26214 60464 913681 589000) 0 nil])
([nil nil ((13092 . 13093)) nil (26214 60464 913680 445000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -13092) (undo-tree-id87 . -1) 13093) nil (26214 60464 913679 845000) 0 nil])
([nil nil ((#("f" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13214) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("l" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13215) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("a" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13216) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("s" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13217) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("k" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13218) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("r" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13219) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 13220) nil (26214 60464 913678 54000) 0 nil])
([nil nil ((13214 . 13221)) nil (26214 60464 913669 989000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -13220) (undo-tree-id74 . -1) 13221) nil (26214 60464 913669 331000) 0 nil])
([nil nil ((13220 . 13221)) nil (26214 60464 913668 61000) 0 nil])
([nil nil ((#("f" 0 1 (face (font-lock-constant-face font-lock-doc-face) fontified t)) . -13220) (undo-tree-id73 . -1) 13221) nil (26214 60464 913667 499000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-doc-face fontified t)) . -12850) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -12851) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -12852) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -12853) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("k" 0 1 (face font-lock-doc-face fontified t)) . -12854) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -12855) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 12856) nil (26214 60464 913665 856000) 0 nil])
([nil nil ((12850 . 12856)) nil (26214 60464 913655 414000) 0 nil])
([nil nil ((12856 . 12857)) nil (26214 60464 913655 39000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-doc-face fontified t)) . -12856) (undo-tree-id60 . -1) 12857) nil (26214 60464 913654 514000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -12917) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("l" 0 1 (fontified t)) . -12918) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("a" 0 1 (fontified t)) . -12919) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("s" 0 1 (fontified t)) . -12920) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("k" 0 1 (fontified t)) . -12921) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("r" 0 1 (fontified t)) . -12922) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 12923) nil (26214 60464 913652 726000) 0 nil])
([nil nil ((12917 . 12923)) nil (26214 60464 913644 261000) 0 nil])
([nil nil ((12923 . 12924)) nil (26214 60464 913643 833000) 0 nil])
([nil nil ((#("f" 0 1 (fontified defer)) . -12923) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 12924) nil (26214 60464 913643 201000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -12998) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("l" 0 1 (fontified t)) . -12999) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("a" 0 1 (fontified t)) . -13000) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("s" 0 1 (fontified t)) . -13001) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("k" 0 1 (fontified t)) . -13002) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("r" 0 1 (fontified t)) . -13003) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 13004) nil (26214 60464 913639 915000) 0 nil])
([nil nil ((12998 . 13004)) nil (26214 60464 913626 23000) 0 nil])
([nil nil ((13004 . 13005)) nil (26214 60464 913625 671000) 0 nil])
([nil nil ((#("f" 0 1 (fontified defer)) . -13004) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 13005) nil (26214 60464 913625 80000) 0 nil])
([nil nil ((#("(global-set-key (kbd \"C-c s\") 'search-flaskr-in-directory)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t)) . 13498) (undo-tree-id12 . -58) (undo-tree-id13 . -28) (undo-tree-id14 . -28) (undo-tree-id15 . -28) (undo-tree-id16 . -28) (undo-tree-id17 . -28) (undo-tree-id18 . -28) (undo-tree-id19 . -28) (undo-tree-id20 . -58) (undo-tree-id21 . -58) (undo-tree-id22 . -58) (undo-tree-id23 . -58) (undo-tree-id24 . -58) (undo-tree-id25 . -58) (undo-tree-id26 . -58) (undo-tree-id27 . -58) (undo-tree-id28 . -58) (undo-tree-id29 . -58) 13556) nil (26214 60464 913621 992000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13498) (undo-tree-id11 . -1)) nil (26214 60464 913610 31000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13498) (undo-tree-id10 . -1)) nil (26214 60464 913608 604000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13496) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (26214 60464 913604 803000) 0 nil])
([nil nil ((3844 . 3850) (t 26214 60464 920167 813000)) nil (26214 62447 175477 742000) 0 nil])
([nil nil ((3850 . 3851)) nil (26214 62447 175476 775000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -3850) (undo-tree-id82 . -1) 3851) nil (26214 62447 175476 199000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4117 . 4118) (nil fontified nil 3847 . 4118) (3847 . 4118)) nil (26214 62447 175475 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4008 . 4009) (nil fontified nil 3953 . 4009) (nil fontified nil 3950 . 3953) (nil fontified nil 3907 . 3950) (nil fontified nil 3904 . 3907) (nil fontified nil 3847 . 3904) (nil fontified nil 3845 . 3847) (3845 . 4009)) nil (26214 62447 175474 52000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-comment-face fontified t)) . -3917) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -3918) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -3919) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3920) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -3921) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -3922) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 3923) nil (26214 62447 175472 128000) 0 nil])
([nil nil ((3917 . 3927)) nil (26214 62447 175463 310000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -3926) (undo-tree-id69 . -1) 3927) nil (26214 62447 175462 739000) 0 nil])
([nil nil ((3926 . 3927)) nil (26214 62447 175461 99000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3926) (undo-tree-id68 . -1) 3927) nil (26214 62447 175460 555000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -3914) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -3915) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -3916) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 3917) nil (26214 62447 175458 803000) 0 nil])
([nil nil ((3914 . 3915)) nil (26214 62447 175450 359000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3914) (undo-tree-id58 . -1) 3915) nil (26214 62447 175449 712000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -3923) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("a" 0 1 (face font-lock-comment-face fontified defer)) . -3924) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("n" 0 1 (face font-lock-comment-face fontified defer)) . -3925) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("d" 0 1 (face font-lock-comment-face fontified defer)) . -3926) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . -3927) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -3928) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("h" 0 1 (face font-lock-comment-face fontified defer)) . -3929) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("a" 0 1 (face font-lock-comment-face fontified defer)) . -3930) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("n" 0 1 (face font-lock-comment-face fontified defer)) . -3931) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -3932) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3933) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 3934) nil (26214 62447 175447 236000) 0 nil])
([nil nil ((3923 . 3924)) nil (26214 62447 175431 946000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3923) (undo-tree-id35 . -1) 3924) nil (26214 62447 175431 403000) 0 nil])
([nil nil ((3932 . 3933)) nil (26214 62447 175430 90000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3932) (undo-tree-id34 . -1) 3933) nil (26214 62447 175429 618000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -3927) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -3928) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -3929) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3930) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -3931) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -3932) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 3933) nil (26214 62447 175427 592000) 0 nil])
([nil nil ((3927 . 3934)) nil (26214 62447 175415 751000) 0 nil])
([nil nil ((3934 . 3935)) nil (26214 62447 175415 298000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3934) (undo-tree-id16 . -1) 3935) nil (26214 62447 175414 833000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-comment-face fontified t)) . -3935) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -3936) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -3937) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 3938) nil (26214 62447 175413 277000) 0 nil])
([nil nil ((3935 . 3936)) nil (26214 62447 175408 413000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3935) (undo-tree-id9 . -1) 3936) nil (26214 62447 175407 935000) 0 nil])
([nil nil ((3937 . 3938)) nil (26214 62447 175406 479000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -3937) (undo-tree-id8 . -1) 3938) nil (26214 62447 175405 683000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -3935) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 3936) nil (26214 62447 175404 163000) 0 nil])
([nil nil ((3935 . 3940)) nil (26214 62447 175402 237000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-comment-face fontified t)) . -3939) (undo-tree-id5 . -1) 3940) nil (26214 62447 175401 432000) 0 nil])
([nil nil ((3939 . 3946)) nil (26214 62447 175400 67000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -3945) (undo-tree-id4 . -1) 3946) nil (26214 62447 175399 562000) 0 nil])
([nil nil ((3945 . 3946)) nil (26214 62447 175398 194000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -3945) (undo-tree-id3 . -1) 3946) nil (26214 62447 175397 579000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4005)) nil (26214 62447 175396 100000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4278) (undo-tree-id2 . -1)) nil (26214 62447 175395 455000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4278) (undo-tree-id1 . -1)) nil (26214 62447 175393 734000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4278) (undo-tree-id0 . -1)) nil (26214 62447 175389 58000) 0 nil])
([nil nil ((4005 . 4009) (t 26214 62447 189383 446000)) nil (26214 62588 843566 407000) 0 nil])
([nil nil ((4009 . 4010)) nil (26214 62588 843565 917000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -4009) (undo-tree-id3 . -1) 4010) nil (26214 62588 843565 439000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4425 . 4426) (nil fontified nil 4006 . 4426) (4006 . 4426)) nil (26214 62588 843564 247000) 0 nil])
([nil nil ((#(";; Define a function to activate boon-set-command-state in grep-mode
(defun my-grep-mode-hook ()
  \"Activate boon-set-command-state when entering grep-mode.\"
  (boon-set-command-state))

;; Add the function to grep-mode-hook
(add-hook 'grep-mode-hook 'my-grep-mode-hook)
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 69 (face font-lock-comment-face fontified t) 69 70 (face (rainbow-delimiters-depth-1-face) fontified t) 70 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 93 (face font-lock-function-name-face fontified t) 93 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 96 (face (rainbow-delimiters-depth-2-face) fontified t) 96 99 (fontified t) 99 157 (face font-lock-doc-face fontified t) 157 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-2-face) fontified t) 184 185 (face (rainbow-delimiters-depth-1-face) fontified t) 185 187 (fontified t) 187 190 (face font-lock-comment-delimiter-face fontified t) 190 225 (face font-lock-comment-face fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-1-face) fontified t) 270 271 (fontified t)) . 4430) (undo-tree-id2 . -271) 4701) nil (26214 62588 843563 329000) 0 nil])
([nil nil ((#("



" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 4427) (undo-tree-id0 . -4) (undo-tree-id1 . -3) 4431) nil (26214 62588 843559 131000) 0 nil])
([nil nil ((1002 . 1006) (t 26214 62588 857372 647000)) nil (26214 62792 149433 312000) 0 nil])
([nil nil ((1006 . 1007)) nil (26214 62792 149432 820000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1006) (undo-tree-id72 . -1) 1007) nil (26214 62792 149432 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1177 . 1178) (nil fontified nil 1003 . 1178) (1003 . 1178)) nil (26214 62792 149431 71000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1144 . 1145) (nil fontified nil 1089 . 1145) (nil fontified nil 1086 . 1089) (nil fontified nil 1064 . 1086) (nil fontified nil 1061 . 1064) (nil fontified nil 1004 . 1061) (nil fontified nil 1002 . 1004) (1002 . 1145)) nil (26214 62792 149430 301000) 0 nil])
([nil nil ((1002 . 1003)) nil (26214 62792 149429 247000) 0 nil])
([nil nil ((1003 . 1004)) nil (26214 62792 149428 907000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1003) (undo-tree-id71 . -1) 1004) nil (26214 62792 149428 410000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -1065) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -1066) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("l" 0 1 (face font-lock-comment-face fontified defer)) . -1067) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("i" 0 1 (face font-lock-comment-face fontified defer)) . -1068) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("t" 0 1 (face font-lock-comment-face fontified defer)) . -1069) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#(" " 0 1 (face font-lock-comment-face fontified defer)) . -1070) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("w" 0 1 (face font-lock-comment-face fontified defer)) . -1071) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("i" 0 1 (face font-lock-comment-face fontified defer)) . -1072) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("n" 0 1 (face font-lock-comment-face fontified defer)) . -1073) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("d" 0 1 (face font-lock-comment-face fontified defer)) . -1074) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("o" 0 1 (face font-lock-comment-face fontified defer)) . -1075) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("w" 0 1 (face font-lock-comment-face fontified defer)) . -1076) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#(" " 0 1 (face font-lock-comment-face fontified defer)) . -1077) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("v" 0 1 (face font-lock-comment-face fontified defer)) . -1078) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("e" 0 1 (face font-lock-comment-face fontified defer)) . -1079) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("r" 0 1 (face font-lock-comment-face fontified defer)) . -1080) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("t" 0 1 (face font-lock-comment-face fontified defer)) . -1081) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("i" 0 1 (face font-lock-comment-face fontified defer)) . -1082) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("c" 0 1 (face font-lock-comment-face fontified defer)) . -1083) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -1084) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1085) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 1086) nil (26214 62792 149425 286000) 0 nil])
([nil nil ((1065 . 1076)) nil (26214 62792 149393 919000) 0 nil])
([nil nil ((1076 . 1077)) nil (26214 62792 149393 586000) 0 nil])
([nil nil ((1077 . 1078)) nil (26214 62792 149393 183000) 0 nil])
([nil nil ((1078 . 1081)) nil (26214 62792 149392 787000) 0 nil])
([nil nil ((1081 . 1097)) nil (26214 62792 149392 387000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -1091) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1092) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1093) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1094) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1095) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1096) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 1097) nil (26214 62792 149391 171000) 0 nil])
([nil nil ((1091 . 1105)) nil (26214 62792 149378 875000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1104) (undo-tree-id10 . -1) 1105) nil (26214 62792 149378 341000) 0 nil])
([nil nil ((1104 . 1105)) nil (26214 62792 149377 95000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -1104) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 1105) nil (26214 62792 149376 266000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1341) (undo-tree-id1 . -1)) nil (26214 62792 149369 914000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 1341) (undo-tree-id0 . -1)) nil (26214 62792 149365 605000) 0 nil])
nil
